// <auto-generated />
using HRAcuity.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HRAcuity.Persistence.Postgres.Migrations
{
    [DbContext(typeof(HrAcuityDbContext))]
    partial class HrAcuityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HRAcuity.Persistence.Entities.NotableQuoteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Quote")
                        .IsRequired()
                        .HasMaxLength(1000000)
                        .HasColumnType("character varying(1000000)");

                    b.Property<string>("QuoteHash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("QuoteLength")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuoteLength");

                    b.ToTable("NotableQuotes");
                });
#pragma warning restore 612, 618
        }
    }
}
